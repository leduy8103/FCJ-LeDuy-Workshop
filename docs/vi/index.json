[
{
	"uri": "http://localhost:1313/FCJ-LeDuy-Workshop/vi/1-introduction/",
	"title": "Chương 1: Giới thiệu tổng quan",
	"tags": [],
	"description": "",
	"content": "Mục tiêu workshop Trong workshop này, bạn sẽ học cách deploy một ứng dụng gồm nhiều container (frontend + backend) lên AWS ECS Fargate. Mục tiêu chính:\nHiểu quy trình CI/CD cơ bản. Docker hóa ứng dụng frontend và backend. Sử dụng các dịch vụ AWS như ECR, ECS Fargate, và CloudWatch. Các bước chính Tìm hiểu về CI/CD và containerization. Docker hóa ứng dụng frontend và backend. Đẩy container image lên Amazon ECR. Deploy container lên ECS Fargate. Tự động hóa quy trình với GitHub Actions. Kiến thức DevOps cốt lõi CI/CD CI/CD (Continuous Integration/Continuous Deployment) là quy trình tự động hóa việc tích hợp và triển khai mã nguồn. Nó giúp giảm thiểu lỗi và tăng tốc độ phát triển phần mềm.\nContinuous Integration: Tích hợp mã nguồn thường xuyên để phát hiện lỗi sớm. Continuous Deployment: Tự động triển khai mã nguồn sau khi kiểm thử thành công. Ví dụ: Mỗi khi push lên nhánh main, GitHub Actions sẽ tự động thực hiện các bước: build image, push lên ECR, và deploy lên ECS Fargate. Containerization Containerization là kỹ thuật đóng gói ứng dụng và các phụ thuộc vào một container. Docker là công cụ phổ biến nhất để thực hiện điều này.\nƯu điểm: Dễ dàng triển khai, nhất quán giữa các môi trường. Công cụ: Docker, Kubernetes. ECS Fargate ECS Fargate là dịch vụ của AWS giúp chạy container mà không cần quản lý server.\nƯu điểm: Không cần quản lý cơ sở hạ tầng. Ứng dụng: Chạy các ứng dụng containerized. Công nghệ sử dụng GitHub Actions: Tự động hóa quy trình CI/CD. Workshop này sử dụng GitHub Actions thay vì AWS CodePipeline vì dễ tiếp cận với fresher. Docker: Đóng gói ứng dụng. Amazon ECR: Lưu trữ container image. Amazon ECS Fargate: Chạy container. CloudWatch: Theo dõi log và trạng thái hệ thống. Kiến trúc tổng quát Dưới đây là sơ đồ kiến trúc tổng quát của hệ thống:\nFrontend: React app. Backend: Node.js hoặc Flask app. ECR: Lưu trữ container image. ECS Fargate: Chạy container. Application Load Balancer: Phân phối traffic. CloudWatch: Ghi log và giám sát. Tip: Đảm bảo bạn đã có tài khoản AWS và hiểu cơ bản về các dịch vụ AWS trước khi bắt đầu.\n"
},
{
	"uri": "http://localhost:1313/FCJ-LeDuy-Workshop/vi/",
	"title": "Workshop: Triển khai ứng dụng với ECS Fargate và CI/CD",
	"tags": [],
	"description": "",
	"content": "Workshop: Triển khai ứng dụng với ECS Fargate và CI/CD Chào mừng bạn đến với workshop về triển khai ứng dụng multi-container lên AWS ECS Fargate với quy trình CI/CD tự động. Trong workshop này, bạn sẽ học cách:\nDockerize ứng dụng frontend và backend Sử dụng Amazon ECR để lưu trữ container images Triển khai containers lên ECS Fargate Thiết lập monitoring với CloudWatch Tự động hóa toàn bộ quy trình với GitHub Actions Mục tiêu của workshop Sau khi hoàn thành workshop này, bạn sẽ có khả năng:\nHiểu được quy trình CI/CD cơ bản Thành thạo việc sử dụng Docker cho containerization Triển khai ứng dụng lên AWS ECS Fargate Thiết lập monitoring và logging Tự động hóa deployment với GitHub Actions Kiến thức yêu cầu Hiểu biết cơ bản về AWS Kinh nghiệm với Docker Hiểu về Git và GitHub Kiến thức cơ bản về CI/CD Thời gian dự kiến Workshop này sẽ mất khoảng 2-3 giờ để hoàn thành.\nKiến trúc hệ thống Hệ thống bao gồm:\nFrontend: React application Backend: Node.js/Flask application ECR: Container registry ECS Fargate: Container orchestration CloudWatch: Monitoring và logging GitHub Actions: CI/CD pipeline "
},
{
	"uri": "http://localhost:1313/FCJ-LeDuy-Workshop/vi/2-dockerize/",
	"title": "Chương 2: Chuẩn bị dự án &amp; Docker hóa ứng dụng",
	"tags": [],
	"description": "",
	"content": "Giả định ban đầu Bạn đã có sẵn mã nguồn cho ứng dụng frontend (React) và backend (Node.js hoặc Flask) trong cùng một repository. Clone repository từ GitHub: # Clone repository chứa cả frontend và backend git clone https://github.com/leduy8103/ecs-cicd-workshop.git Kiểm tra Dockerfile Dockerfile cho Frontend (React) # Sử dụng image Node.js FROM node:16 # Thiết lập thư mục làm việc WORKDIR /app # Copy package.json và cài đặt dependencies COPY package.json ./ RUN npm install # Copy toàn bộ mã nguồn COPY . . # Build ứng dụng RUN npm run build # Sử dụng image Nginx để phục vụ ứng dụng FROM nginx:alpine COPY --from=0 /app/build /usr/share/nginx/html # Expose port EXPOSE 80 CMD [\u0026#34;nginx\u0026#34;, \u0026#34;-g\u0026#34;, \u0026#34;daemon off;\u0026#34;] Dockerfile cho Backend (Node.js) # Sử dụng image Node.js FROM node:16 # Thiết lập thư mục làm việc WORKDIR /app # Copy package.json và cài đặt dependencies COPY package.json ./ RUN npm install # Copy toàn bộ mã nguồn COPY . . # Expose port EXPOSE 3000 CMD [\u0026#34;node\u0026#34;, \u0026#34;index.js\u0026#34;] Tip: Đảm bảo Dockerfile đã được kiểm tra và hoạt động đúng trước khi tiếp tục.\n"
},
{
	"uri": "http://localhost:1313/FCJ-LeDuy-Workshop/vi/3-ecr/",
	"title": "Chương 3: Tạo ECR repositories và đẩy image",
	"tags": [],
	"description": "",
	"content": "Tạo repository trong Amazon ECR Các bước thực hiện Truy cập AWS Management Console. Điều hướng đến ECR (Elastic Container Registry). Tạo 2 repository: frontend-app backend-app Tip: Đặt tên repository rõ ràng để dễ quản lý.\nBuild và push image lên ECR Sử dụng GitHub Actions Tạo file .github/workflows/deploy.yml name: Build and Push to ECR on: push: branches: - main jobs: build-and-push: runs-on: ubuntu-latest env: AWS_REGION: ${{ secrets.AWS_REGION }} AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} steps: - name: Checkout code uses: actions/checkout@v3 - name: Login to Amazon ECR id: login-ecr uses: aws-actions/amazon-ecr-login@v1 with: aws-region: ${{ env.AWS_REGION }} - name: Build frontend image run: | docker build -t frontend-app ./frontend-app docker tag frontend-app:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/frontend-app:latest - name: Push frontend image run: | docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/frontend-app:latest - name: Build backend image run: | docker build -t backend-app ./backend-app docker tag backend-app:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/backend-app:latest - name: Push backend image run: | docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/backend-app:latest - name: Configure AWS credentials uses: aws-actions/configure-aws-credentials@v2 with: role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsRole aws-region: ${{ env.AWS_REGION }} Thiết lập secrets trên GitHub Để sử dụng secrets trong GitHub Actions, bạn cần thiết lập các secrets trong repository của mình.\nCác bước thực hiện Truy cập repository của bạn trên GitHub. Điều hướng đến Settings \u0026gt; Secrets and variables \u0026gt; Actions. Nhấn New repository secret để thêm secrets mới.\nThêm các secrets cần thiết:\nAWS_REGION: Vùng AWS của bạn (ví dụ: ap-southeast-1). AWS_ACCOUNT_ID: ID tài khoản AWS của bạn. AWS_ACCESS_KEY_ID: Access key ID của IAM user hoặc role. AWS_SECRET_ACCESS_KEY: Secret access key của IAM user hoặc role. Cảnh báo: Đảm bảo rằng các secrets này được bảo mật và không chia sẻ công khai.\nSử dụng secrets trong workflow Trong file workflow .github/workflows/deploy.yml, bạn có thể truy cập các secrets bằng cú pháp secrets.\u0026lt;SECRET_NAME\u0026gt;.\nVí dụ:\nenv: AWS_REGION: ${{ secrets.AWS_REGION }} AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} steps: - name: Configure AWS credentials uses: aws-actions/configure-aws-credentials@v2 with: aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} aws-region: ${{ secrets.AWS_REGION }} Kiểm tra kết quả Truy cập AWS Management Console để kiểm tra các image đã được đẩy lên repository. Đảm bảo các image có tag latest và đúng định dạng. "
},
{
	"uri": "http://localhost:1313/FCJ-LeDuy-Workshop/vi/4-deploy-ecs-fargate/",
	"title": "Chương 4: Deploy ECS Fargate",
	"tags": [],
	"description": "",
	"content": "Mục tiêu chương Trong chương này, bạn sẽ học cách triển khai ứng dụng frontend và backend đã được Docker hóa và đẩy lên ECR, bằng cách sử dụng Amazon ECS Fargate – một dịch vụ serverless cho container trên AWS.\nBước 1: Tạo ECS Cluster Truy cập AWS Console → tìm ECS Chọn Clusters → nhấn Create Cluster Chọn loại cluster: Networking only (Fargate) Đặt tên: workshop-cluster-81 Nhấn Create ✅ Cluster sẽ không có EC2 instance vì bạn đang dùng Fargate (serverless).\nBước 2: Tạo Task Definition Bạn cần tạo 2 task definitions – một cho frontend và một cho backend.\n2.1. Frontend Task ECS → Task Definitions → Create new Task Definition Launch type: Fargate Task name: frontend-task CPU: 0.5 vCPU, Memory: 1 GB Nhấn Add container:\nContainer name: frontend Image URI: \u0026lt;AWS_ACCOUNT_ID\u0026gt;.dkr.ecr.\u0026lt;AWS_REGION\u0026gt;.amazonaws.com/frontend-app:latest Port mappings: 80 Nhấn Create\n2.2. Backend Task Lặp lại các bước trên với:\nTask name: backend-task Container name: backend Image URI: \u0026lt;AWS_ACCOUNT_ID\u0026gt;.dkr.ecr.\u0026lt;AWS_REGION\u0026gt;.amazonaws.com/backend-app:latest Port mappings: 3000 ✅ Tạo thành công backend-task và frontend-task. Bước 3: Tạo VPC và Networking Nếu bạn chưa có VPC phù hợp, hãy tạo VPC theo các bước sau:\nTruy cập VPC → Create VPC Tên: workshop-vpc, CIDR block: 10.0.0.0/16 Tạo 2 subnet: Subnet 1: 10.0.1.0/24 – Public Subnet 2: 10.0.2.0/24 – Private Tạo Internet Gateway → gắn vào workshop-vpc Cập nhật Route Table: Public Route Table: trỏ 0.0.0.0/0 đến Internet Gateway Gán route table này cho Subnet 1 ⚠️ Chỉ frontend cần truy cập internet (public subnet). Backend có thể đặt trong private subnet.\nBước 4: Tạo Security Group Vào EC2 → Security Groups → Create Security Group Tên: frontend-sg, mô tả: Allow HTTP Inbound rules: Type: HTTP Port: 80 Source: 0.0.0.0/0 Outbound: giữ mặc định (Allow all) Tạo thêm backend-sg:\nInbound: Type: Custom TCP, Port 3000 Source: frontend-sg (chọn từ group list) Outbound: mặc định Bước 5: Tạo ECS Service (chạy container) 5.1. Tạo Frontend Service Vào ECS → workshop-cluster Chọn tab Services → Create Điền thông tin: Launch type: Fargate Task definition: frontend-task Service name: frontend-service Số lượng task: 1 Cluster VPC: chọn workshop-vpc Subnet: chọn subnet public Security Group: chọn frontend-sg Tích Enable public IP Nhấn Create Service 5.2. Tạo Backend Service Lặp lại các bước trên, với:\nTask: backend-task Subnet: chọn subnet private (hoặc public nếu cần demo đơn giản) SG: backend-sg Không cần public IP nếu không gọi trực tiếp từ trình duyệt Kiểm tra triển khai Sau khi tạo xong:\nECS sẽ chạy 2 task trong 2 service. Vào ECS \u0026gt; Clusters \u0026gt; Tasks để kiểm tra trạng thái RUNNING Nếu không thấy, kiểm tra lại Security Group và ECR image đã push đúng chưa.\n"
},
{
	"uri": "http://localhost:1313/FCJ-LeDuy-Workshop/vi/5-cloudwatch/",
	"title": "Chương 5: Monitoring với Amazon CloudWatch",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong chương này, bạn sẽ học cách sử dụng Amazon CloudWatch để giám sát hiệu năng của các container chạy trên ECS Fargate. Các bước bao gồm:\nTheo dõi chỉ số hệ thống (CPU, memory, network) Tạo cảnh báo (alarm) Xây dựng dashboard trực quan (Tuỳ chọn) Xem log để chẩn đoán sự cố 1. Theo dõi chỉ số với CloudWatch Metrics Các bước: Truy cập AWS Console → CloudWatch → Metrics Tìm ECS Cluster của bạn → chọn các chỉ số cần theo dõi: Metric Ý nghĩa CPUUtilization Tỷ lệ CPU đang sử dụng MemoryUtilization Bộ nhớ sử dụng 2. Tạo cảnh báo với CloudWatch Alarm Ví dụ: Cảnh báo khi CPU \u0026gt; 80% trong 5 phút Vào CloudWatch → Alarms → Create Alarm Chọn metric: CPUUtilization Chọn cluster → service cần giám sát Đặt điều kiện: Threshold: Greater than 80 Evaluation: 5 minutes Tùy chọn: gửi cảnh báo qua SNS hoặc email Preview cầu hình → chọn \u0026ldquo;Create Alarm\u0026rdquo; Gợi ý: Tạo thêm alarm cho MemoryUtilization nếu bạn nghi ngờ có rò rỉ bộ nhớ (memory leak).\n3. Tạo Dashboard giám sát tổng quát Vào CloudWatch → Dashboards → Create Dashboard Đặt tên ví dụ: ecs-monitoring-dashboard Thêm các widget sau: Widget Loại CPUUtilization (FE + BE) Line graph MemoryUtilization Line graph Alarm status Text or Alarm widget Lưu lại và sử dụng để giám sát trực quan 4. Kiểm tra log container Nếu cần kiểm tra lỗi:\nVào CloudWatch → Logs → Log groups Chọn log groups muốn xem Click log stream mới nhất → xem log chi tiết 🔧 Log driver được cấu hình mặc định trong task definition ở bước trước.\nKết luận Sử dụng CloudWatch giúp bạn theo dõi, cảnh báo và trực quan hóa hiệu năng ECS service. Đây là công cụ DevOps không thể thiếu để đảm bảo ứng dụng hoạt động ổn định và phản ứng kịp thời khi có sự cố.\n"
},
{
	"uri": "http://localhost:1313/FCJ-LeDuy-Workshop/vi/6-github-actions/",
	"title": "Chương 6: Tự động hóa toàn bộ với GitHub Actions",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Sau chương này, bạn sẽ thiết lập quy trình CI/CD tự động hóa toàn bộ khi push code lên GitHub:\nBuild image cho frontend và backend Push image lên Amazon ECR Triển khai container lên ECS Fargate Ghi log và kiểm tra trạng thái (Tuỳ chọn) Rollback nếu có lỗi 1. Thiết lập bí mật trong GitHub Vào GitHub repo → Settings → Secrets and variables → Actions, thêm các biến:\nName Value AWS_ACCESS_KEY_ID Access Key của IAM user/role AWS_SECRET_ACCESS_KEY Secret key tương ứng AWS_REGION ap-southeast-1 AWS_ACCOUNT_ID ID tài khoản AWS 🎯 IAM user nên có quyền: AmazonEC2ContainerRegistryFullAccess, AmazonECS_FullAccess, CloudWatchLogsFullAccess\n2. Tạo file .github/workflows/ci-cd.yml name: CI/CD Pipeline on: push: branches: - main env: AWS_REGION: ${{ secrets.AWS_REGION }} AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout source code uses: actions/checkout@v3 - name: Configure AWS credentials uses: aws-actions/configure-aws-credentials@v2 with: aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} aws-region: ${{ env.AWS_REGION }} - name: Login to Amazon ECR uses: aws-actions/amazon-ecr-login@v1 - name: Build and Push Frontend Image run: | docker build -t frontend-app ./frontend docker tag frontend-app:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/frontend-app:latest docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/frontend-app:latest - name: Build and Push Backend Image run: | docker build -t backend-app ./backend docker tag backend-app:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/backend-app:latest docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/backend-app:latest - name: Deploy to ECS run: | aws ecs update-service --cluster workshop-cluster --service frontend-service --force-new-deployment aws ecs update-service --cluster workshop-cluster --service backend-service --force-new-deployment - name: Check ECS Service Status run: | aws ecs describe-services --cluster workshop-cluster \\ --services frontend-service backend-service 3. Logging và kiểm tra trạng thái Kiểm tra log container: Vào CloudWatch → Log groups → Xem log stream Kiểm tra trạng thái ECS: aws ecs describe-services --cluster workshop-cluster --services frontend-service backend-service 4. Rollback (thủ công) Khi deploy lỗi, bạn có thể rollback bằng cách:\nRevert code → Push lại Hoặc deploy image cũ từ ECR (nếu đã được tag và lưu trước đó) 📦 Gợi ý: Sử dụng tag :v1, :v2, :rollback,\u0026hellip; để dễ kiểm soát rollback image\n"
},
{
	"uri": "http://localhost:1313/FCJ-LeDuy-Workshop/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/FCJ-LeDuy-Workshop/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]